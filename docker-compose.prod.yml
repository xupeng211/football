version: '3.8'

# 生产环境配置
services:
  # PostgreSQL 数据库 (生产优化)
  postgres:
    image: postgres:15-alpine
    container_name: football_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-football_predict}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
      - ./infra/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - football_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-football_predict}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存 (生产优化)
  redis:
    image: redis:7-alpine
    container_name: football_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./infra/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    networks:
      - football_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API 服务 (生产优化)
  api:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.api.secure
    container_name: football_api_prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PREFECT_API_URL=${PREFECT_API_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_SECRET_KEY=${API_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models/artifacts:/app/models/artifacts:ro
      - ./logs:/app/logs
      - ./infra/config/logging.yaml:/app/logging.yaml:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      replicas: 2
    restart: unless-stopped
    networks:
      - football_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: football_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - football_net

  # Prefect 服务器 (生产优化)
  prefect:
    image: prefecthq/prefect:2.19.2-python3.11
    container_name: football_prefect_prod
    ports:
      - "4200:4200"
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=${PREFECT_DATABASE_URL}
      - PREFECT_LOGGING_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - football_net
    command: prefect server start

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  football_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
