#!/bin/bash
# 🎯 脚手架模块化系统主入口
# 统一的命令行接口

set -euo pipefail

# 脚本配置
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENHANCED_INSTALLER="${SCRIPT_DIR}/scaffold-modules/tools/enhanced-installer.sh"
MODULE_MANAGER="${SCRIPT_DIR}/scaffold-modules/tools/module-manager.py"

# 颜色输出
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# 显示帮助信息
show_help() {
    echo -e "${BLUE}🎯 脚手架模块化系统${NC}"
    echo ""
    echo "用法: ./scaffold <命令> [选项]"
    echo ""
    echo "可用命令:"
    echo ""
    echo -e "${GREEN}📦 模块管理:${NC}"
    echo "  install <modules...>     安装指定模块"
    echo "  uninstall <module>       卸载指定模块"
    echo "  list                     列出所有可用模块"
    echo "  status                   显示模块安装状态"
    echo "  upgrade [module]         升级模块（不指定则升级全部）"
    echo ""
    echo -e "${GREEN}🎚️ 预设包:${NC}"
    echo "  preset <name>            安装预设包"
    echo "                          可选: minimal, professional, enterprise, ai-enhanced"
    echo ""
    echo -e "${GREEN}🔧 系统管理:${NC}"
    echo "  setup                    交互式初始化向导"
    echo "  health                   系统健康检查"
    echo "  clean                    清理临时文件"
    echo "  backup                   备份当前配置"
    echo ""
    echo -e "${GREEN}ℹ️  信息:${NC}"
    echo "  help                     显示此帮助信息"
    echo "  version                  显示版本信息"
    echo ""
    echo "示例:"
    echo "  ./scaffold setup                    # 交互式安装"
    echo "  ./scaffold preset professional     # 安装专业版"
    echo "  ./scaffold install core cicd       # 安装特定模块"
    echo "  ./scaffold list                     # 查看可用模块"
    echo "  ./scaffold status                   # 查看安装状态"
    echo ""
}

# 显示版本信息
show_version() {
    echo -e "${BLUE}🎯 脚手架模块化系统 v2.1.0${NC}"
    echo ""
    echo "功能:"
    echo "  ✨ 8个独立模块，按需安装"
    echo "  🤖 智能依赖管理和冲突检测"
    echo "  📦 4种预设包，开箱即用"
    echo "  🔄 版本控制和自动回滚"
    echo ""
}

# 主函数
main() {
    case "${1:-}" in
        # 模块管理
        install)
            shift
            if [[ $# -eq 0 ]]; then
                echo "错误: 请指定要安装的模块"
                echo "用法: ./scaffold install <module1> [module2] ..."
                exit 1
            fi
            python3 "$MODULE_MANAGER" install "$@"
            ;;

        uninstall)
            if [[ $# -lt 2 ]]; then
                echo "错误: 请指定要卸载的模块"
                echo "用法: ./scaffold uninstall <module>"
                exit 1
            fi
            python3 "$MODULE_MANAGER" uninstall "$2"
            ;;

        list)
            python3 "$MODULE_MANAGER" list
            ;;

        status)
            python3 "$MODULE_MANAGER" status
            ;;

        upgrade)
            if [[ $# -lt 2 ]]; then
                echo -e "${YELLOW}升级所有模块...${NC}"
                python3 "$MODULE_MANAGER" upgrade-all
            else
                python3 "$MODULE_MANAGER" upgrade "$2"
            fi
            ;;

        # 预设包
        preset)
            if [[ $# -lt 2 ]]; then
                echo "错误: 请指定预设包名称"
                echo "可用预设包: minimal, professional, enterprise, ai-enhanced"
                exit 1
            fi
            "$ENHANCED_INSTALLER" --preset "$2"
            ;;

        # 系统管理
        setup)
            echo -e "${BLUE}🚀 启动交互式安装向导...${NC}"
            "$ENHANCED_INSTALLER" --interactive
            ;;

        health)
            echo -e "${BLUE}🔍 执行系统健康检查...${NC}"
            if [[ -f "scripts/health-check.py" ]]; then
                python3 scripts/health-check.py
            else
                echo "健康检查脚本未找到，请先安装核心模块"
            fi
            ;;

        clean)
            echo -e "${YELLOW}🧹 清理临时文件...${NC}"
            rm -rf logs/*.log
            rm -rf reports/temp_*
            rm -rf __pycache__/ .pytest_cache/
            echo "✅ 清理完成"
            ;;

        backup)
            BACKUP_DIR="../scaffold-backup-$(date +%Y%m%d-%H%M%S)"
            echo -e "${YELLOW}💾 备份当前配置到 $BACKUP_DIR...${NC}"
            cp -r . "$BACKUP_DIR"
            echo "✅ 备份完成: $BACKUP_DIR"
            ;;

        # 信息
        help|-h|--help)
            show_help
            ;;

        version|-v|--version)
            show_version
            ;;

        # 默认
        "")
            echo -e "${BLUE}🎯 脚手架模块化系统${NC}"
            echo ""
            echo "使用 './scaffold help' 查看可用命令"
            echo "使用 './scaffold setup' 开始交互式安装"
            echo ""
            ;;

        *)
            echo "错误: 未知命令 '$1'"
            echo "使用 './scaffold help' 查看可用命令"
            exit 1
            ;;
    esac
}

# 执行主函数
main "$@"
