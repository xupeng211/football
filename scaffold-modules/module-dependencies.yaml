# 🔗 脚手架模块依赖关系配置
# 用于管理模块间的依赖关系、冲突和兼容性

version: "2.0.0"
last_updated: "2024-01-01"

# 模块依赖关系图
dependencies:
  core: [] # 核心模块不依赖任何其他模块
  cicd: ["core"] # CI/CD依赖核心模块
  docker: ["core"] # Docker依赖核心模块
  env: ["core"] # 环境管理依赖核心模块
  ai: ["core", "cicd"] # AI工具依赖核心和CI/CD模块
  testing: ["core"] # 测试框架依赖核心模块
  monitoring: ["core", "testing"] # 监控依赖核心和测试模块
  docs: ["core"] # 文档系统依赖核心模块

# 模块冲突定义
conflicts:
  # 暂无冲突模块
  # 示例：["module_a", "module_b"]  # 两个模块不能同时安装

# 可选依赖关系
optional_dependencies:
  cicd:
    # CI/CD模块可以选择性地增强其他模块
    recommended_with: ["testing", "monitoring"]
    benefits:
      testing: "集成测试到CI流程"
      monitoring: "CI性能监控和告警"

  ai:
    # AI工具可以增强其他模块
    recommended_with: ["testing", "monitoring", "docs"]
    benefits:
      testing: "智能测试分析和优化"
      monitoring: "AI驱动的异常检测"
      docs: "自动化文档生成"

  monitoring:
    # 监控模块与其他模块的协同效果
    recommended_with: ["docker", "cicd"]
    benefits:
      docker: "容器性能监控"
      cicd: "构建和部署监控"

# 模块安装顺序
install_order:
  # 安装顺序由依赖关系决定，这里定义推荐顺序
  recommended:
    - "core" # 1. 首先安装核心模块
    - "env" # 2. 环境配置
    - "cicd" # 3. CI/CD流程
    - "testing" # 4. 测试框架
    - "docker" # 5. 容器化
    - "monitoring" # 6. 监控系统
    - "ai" # 7. AI工具
    - "docs" # 8. 文档系统

# 模块版本兼容性
version_compatibility:
  # 定义模块间的版本兼容性要求
  core:
    min_version: "2.0.0"
    compatible_with:
      cicd: ">=2.0.0"
      docker: ">=2.0.0"
      env: ">=2.0.0"
      ai: ">=2.0.0"
      testing: ">=2.0.0"
      monitoring: ">=2.0.0"
      docs: ">=2.0.0"

# 系统要求矩阵
system_requirements:
  global:
    python: ">=3.11"
    git: ">=2.30"

  module_specific:
    cicd:
      pre-commit: ">=2.15.0"
    docker:
      docker: ">=20.10"
      docker-compose: ">=1.29.0"
    ai:
      additional_packages: ["openai", "requests", "jinja2"]
    testing:
      additional_packages: ["pytest", "pytest-cov", "pytest-mock"]
    monitoring:
      additional_packages: ["prometheus-client", "grafana-api", "psutil"]
    docs:
      additional_packages: ["mkdocs", "mkdocs-material"]

# 性能影响评估
performance_impact:
  # 各模块对系统性能的影响评估
  core:
    cpu_impact: "minimal"
    memory_impact: "minimal"
    disk_space: "50MB"

  cicd:
    cpu_impact: "low"
    memory_impact: "low"
    disk_space: "100MB"

  docker:
    cpu_impact: "medium"
    memory_impact: "high"
    disk_space: "500MB"

  ai:
    cpu_impact: "medium"
    memory_impact: "medium"
    disk_space: "200MB"

  testing:
    cpu_impact: "low"
    memory_impact: "low"
    disk_space: "150MB"

  monitoring:
    cpu_impact: "low"
    memory_impact: "medium"
    disk_space: "300MB"

  docs:
    cpu_impact: "minimal"
    memory_impact: "minimal"
    disk_space: "100MB"

# 升级路径
upgrade_paths:
  # 定义从旧版本升级到新版本的路径
  "1.0.0_to_2.0.0":
    description: "主要版本升级，包含破坏性变更"
    steps:
      - "备份现有配置"
      - "卸载旧版本模块"
      - "安装新版本模块"
      - "迁移配置文件"
      - "验证功能完整性"
    breaking_changes:
      - "配置文件格式变更"
      - "脚本接口调整"
      - "依赖关系更新"

# 故障排除
troubleshooting:
  common_issues:
    dependency_conflict:
      description: "模块依赖冲突"
      solutions:
        - "检查模块版本兼容性"
        - "使用强制安装选项"
        - "手动解决依赖关系"

    installation_failure:
      description: "模块安装失败"
      solutions:
        - "检查系统要求"
        - "验证网络连接"
        - "查看详细错误日志"

    permission_denied:
      description: "权限不足错误"
      solutions:
        - "使用sudo运行安装器"
        - "检查文件权限"
        - "确保目录可写"
