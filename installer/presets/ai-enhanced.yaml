# 🤖 AI增强版预设包配置
# 适用于：AI驱动项目、智能化需求
# 文件数量：~50个
# 安装时间：1.5分钟

name: "ai-enhanced"
display_name: "🤖 AI增强版"
description: "AI驱动的智能化开发环境配置"
version: "2.0.0"

# 包含的模块
modules:
  - name: "core"
    version: ">=2.0.0"
    required: true
    description: "核心基础模块"

  - name: "cicd"
    version: ">=2.0.0"
    required: true
    description: "CI/CD流水线"
    sub_modules:
      - "basic"
      - "security"

  - name: "ai"
    version: ">=2.0.0"
    required: true
    description: "AI辅助工具集"

  - name: "monitoring"
    version: ">=2.0.0"
    required: true
    description: "智能监控分析"

  - name: "testing"
    version: ">=2.0.0"
    required: false
    description: "智能测试框架"

# 可选模块
optional_modules:
  - name: "docker"
    description: "容器化支持"
    benefit: "AI服务容器化部署"

  - name: "env"
    description: "环境管理"
    benefit: "多环境AI模型配置"

  - name: "docs"
    description: "智能文档生成"
    benefit: "AI驱动的文档自动化"

# AI特定配置
ai_configs:
  models:
    # 支持的AI模型配置
    openai:
      api_version: "v1"
      models:
        - "gpt-4"
        - "gpt-3.5-turbo"
        - "text-embedding-ada-002"

    local_models:
      enabled: true
      models:
        - "llama2"
        - "codellama"

  features:
    # AI增强功能
    code_analysis:
      enabled: true
      features:
        - "intelligent_code_review"
        - "bug_detection"
        - "performance_optimization"

    automated_testing:
      enabled: true
      features:
        - "test_generation"
        - "test_optimization"
        - "coverage_analysis"

    documentation:
      enabled: true
      features:
        - "auto_doc_generation"
        - "api_documentation"
        - "readme_enhancement"

    monitoring:
      enabled: true
      features:
        - "anomaly_detection"
        - "predictive_maintenance"
        - "intelligent_alerting"

# 模块配置
module_configs:
  ai:
    scripts:
      - "ai-auto-init.py"
      - "ci-diagnostics.py"
      - "ci-problem-detector.py"
      - "validate-context.py"
      - "dependency-conflict-detector.py"
      - "automated_test_report.py"
    workflows:
      - "ai-maintenance.yml"
      - "guardrail-daily.yml"
    configs:
      - "model-configs.yaml"
      - "prompts.yaml"

  cicd:
    ai_integration:
      enabled: true
      features:
        - "intelligent_build_optimization"
        - "automated_issue_detection"
        - "smart_rollback_decisions"

  monitoring:
    ai_features:
      - "pattern_recognition"
      - "trend_analysis"
      - "predictive_scaling"

# 安装后配置
post_install:
  commands:
    - "poetry install --with dev,ai"
    - "pip install openai transformers torch --quiet"
    - "python scripts/ai-auto-init.py --setup"
    - "pre-commit install"

  messages:
    - "🎉 AI增强版脚手架安装完成！"
    - "🤖 AI辅助工具已就绪"
    - "🧠 智能代码分析和诊断已配置"
    - "🔍 运行 python scripts/ci-diagnostics.py 进行智能诊断"
    - "🛡️ 每日AI防护检查已激活"
    - "📊 智能监控和预测分析已启动"
    - "💡 查看 ai-configs/ 目录配置AI模型"

# 系统要求
requirements:
  python: ">=3.11"
  poetry: ">=1.5.0"
  git: ">=2.30"
  memory: ">=8GB" # AI模型需要更多内存
  storage: ">=10GB" # AI模型存储空间

# AI特定依赖
ai_requirements:
  packages:
    - "openai>=1.0.0"
    - "transformers>=4.30.0"
    - "torch>=2.0.0"
    - "numpy>=1.24.0"
    - "pandas>=2.0.0"
    - "scikit-learn>=1.3.0"

  optional_packages:
    - "tensorflow>=2.13.0"
    - "pytorch-lightning>=2.0.0"
    - "huggingface-hub>=0.16.0"

# 特性标签
features:
  - "ai_powered"
  - "intelligent_analysis"
  - "automated_optimization"
  - "predictive_maintenance"
  - "smart_monitoring"
  - "code_intelligence"

# 估算指标
metrics:
  files_count: 50
  install_time_seconds: 90
  setup_complexity: "high"
  maintenance_effort: "low"
  team_size: "5-20 人"
  project_scale: "AI驱动项目"
  ai_intelligence_level: "advanced"

# 兼容性
compatibility:
  platforms:
    - "linux"
    - "macos"
    - "windows"
  project_types:
    - "ai_applications"
    - "machine_learning"
    - "data_science"
    - "intelligent_systems"
    - "automation_tools"

# AI服务集成
ai_integrations:
  cloud_services:
    - "OpenAI API"
    - "Azure OpenAI"
    - "Google AI Platform"
    - "AWS Bedrock"

  local_services:
    - "Ollama"
    - "LocalAI"
    - "Text Generation WebUI"

# 使用指南
usage_guide:
  getting_started:
    - "配置AI API密钥"
    - "运行初始化脚本"
    - "测试AI功能"
    - "查看智能报告"

  best_practices:
    - "定期更新AI模型"
    - "监控AI服务使用量"
    - "优化提示词模板"
    - "评估AI建议质量"
