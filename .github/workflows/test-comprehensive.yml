name: 全面测试监控

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 60
  UV_SYSTEM_PYTHON: 1
  PYTHON_VERSION: "3.11.9"

jobs:
  test:
    name: "Full Test Suite"
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: football_test
          POSTGRES_USER: football
          POSTGRES_PASSWORD: football
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Install psql client
      run: sudo apt-get update && sudo apt-get install -y postgresql-client

    - name: Initialize DB Schema
      env:
        PGPASSWORD: football
      run: |
        chmod +x sql/schema.sql
        psql -h localhost -U football -d football_test -f sql/schema.sql

    - name: Run Tests
      env:
        DATABASE_URL: postgresql://football:football@localhost:5432/football_test
      run: CI=true poetry run pytest

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          reports/
          .coverage
          coverage.json
        if-no-files-found: ignore
