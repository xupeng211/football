name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行安全扫描
    - cron: '0 2 * * *'

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 60
  PYTHON_VERSION: "3.11.9"

jobs:
  security-scan:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run Bandit Security Scan
      run: |
        poetry run bandit -r . -c pyproject.toml -f json -o bandit-report.json || true
        poetry run bandit -r . -c pyproject.toml

    - name: Run Safety Check
      run: |
        poetry run pip-audit --format=json --output=safety-report.json || true
        poetry run pip-audit

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔒 Security Scan Results\n\n';

          // Bandit results
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = banditReport.results.length;
            comment += `### Bandit Security Scan\n`;
            comment += `- **Issues Found**: ${issues}\n`;
            if (issues > 0) {
              comment += `- **Severity**: ${banditReport.metrics._totals.SEVERITY}\n`;
            }
          } catch (e) {
            comment += `### Bandit Security Scan\n- ✅ No issues found\n`;
          }

          // Safety results
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            comment += `\n### Safety Dependency Check\n`;
            comment += `- **Vulnerabilities**: ${safetyReport.vulnerabilities?.length || 0}\n`;
          } catch (e) {
            comment += `\n### Safety Dependency Check\n- ✅ No vulnerabilities found\n`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
