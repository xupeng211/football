# AI-Enhanced: 集成的AI智能维护工作流
name: AI Smart Maintenance

on:
  # 每日自动运行
  schedule:
    - cron: '0 0 * * *'  # 每天午夜UTC

  # 手动触发 - 可选择运行模式
  workflow_dispatch:
    inputs:
      mode:
        description: '运行模式'
        required: true
        default: 'bug-report'
        type: choice
        options:
        - bug-report
        - create-fix-pr
        - full-maintenance
      bug_description:
        description: '修复模式: Bug描述'
        required: false
        default: ''
      fix_patch:
        description: '修复模式: Base64编码的补丁文件'
        required: false
        default: ''

jobs:
  # 夜间Bug报告任务
  nightly-bug-report:
    runs-on: ubuntu-latest
    if: github.event.schedule || inputs.mode == 'bug-report' || inputs.mode == 'full-maintenance'

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          pip install bandit safety

      - name: 安全扫描
        run: |
          echo "🔍 执行安全扫描..."
          bandit -r . -f json -o security-report.json || true
          safety check --json --output safety-report.json || true

      - name: 生成问题报告
        run: |
          echo "📋 生成每日维护报告..."
          echo "## 🌙 每日Bug报告 - $(date)" > bug-report.md
          echo "### 安全问题" >> bug-report.md
          if [ -f security-report.json ]; then
            echo "发现安全问题，请检查security-report.json" >> bug-report.md
          else
            echo "✅ 未发现安全问题" >> bug-report.md
          fi

      - name: 上传报告
        uses: actions/upload-artifact@v3
        with:
          name: daily-maintenance-report
          path: |
            bug-report.md
            security-report.json
            safety-report.json

  # AI修复PR创建任务
  create-ai-fix-pr:
    runs-on: ubuntu-latest
    if: inputs.mode == 'create-fix-pr' || inputs.mode == 'full-maintenance'
    needs: [nightly-bug-report]

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 创建修复分支
        run: |
          BRANCH_NAME="ai-fix-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: 应用AI修复
        if: inputs.fix_patch != ''
        run: |
          echo "🤖 应用AI生成的修复..."
          echo "${{ inputs.fix_patch }}" | base64 -d > fix.patch
          git apply fix.patch || echo "补丁应用失败"

      - name: 提交修复
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "🤖 AI自动修复: ${{ inputs.bug_description }}" || echo "无变更需要提交"

      - name: 推送并创建PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin $BRANCH_NAME
          gh pr create \
            --title "🤖 AI自动修复: ${{ inputs.bug_description }}" \
            --body "此PR由AI自动生成用于修复问题: ${{ inputs.bug_description }}" \
            --label "ai-fix" \
            --assignee ${{ github.actor }}

  # 综合维护任务（仅在full-maintenance模式运行）
  full-maintenance:
    runs-on: ubuntu-latest
    if: inputs.mode == 'full-maintenance'
    needs: [nightly-bug-report, create-ai-fix-pr]

    steps:
      - name: 综合报告
        run: |
          echo "🎯 AI智能维护完成"
          echo "- ✅ 夜间Bug扫描完成"
          echo "- ✅ AI修复PR创建完成"
          echo "请查看Actions artifacts获取详细报告"
