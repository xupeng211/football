name: Notify on CI Failure

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  notify-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = context.payload.workflow_run;
            const title = `🚨 CI Failure: ${workflow.head_branch}`;
            const body = `
            ## 🚨 CI构建失败报告
            
            **工作流**: ${workflow.name}
            **分支**: ${workflow.head_branch}
            **提交**: ${workflow.head_sha.substring(0, 7)}
            **时间**: ${new Date(workflow.created_at).toLocaleString()}
            **运行ID**: ${workflow.id}
            
            ### 🔗 链接
            - [查看失败的运行](${workflow.html_url})
            - [查看提交](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${workflow.head_sha})
            
            ### ⚡ 快速修复建议
            
            常见CI失败原因：
            1. **测试失败** - 检查测试用例和代码变更
            2. **Linting错误** - 运行 \`make lint\` 修复代码风格
            3. **类型检查** - 运行 \`make type\` 修复类型问题
            4. **依赖问题** - 检查 requirements.txt 和环境配置
            
            ### 🛠️ 本地调试命令
            
            \`\`\`bash
            # 激活环境并运行完整检查
            source scripts/activate-venv.sh
            make ci
            
            # 生成测试报告查看详情
            python scripts/automated_test_report.py
            \`\`\`
            
            ---
            *此Issue由CI监控自动创建 - ${new Date().toISOString()}*
            `;
            
            // 检查是否已存在相同的failure issue
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,automated'
            });
            
            const sameWorkflowIssue = existingIssues.data.find(issue => 
              issue.title.includes(workflow.head_branch) && 
              issue.title.includes('CI Failure')
            );
            
            if (!sameWorkflowIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'automated', 'bug']
              });
            }

      - name: Send notification comment
        uses: actions/github-script@v7
        if: github.event.workflow_run.event == 'pull_request'
        with:
          script: |
            const workflow = context.payload.workflow_run;
            const comment = `
            ## 🚨 CI检查失败
            
            @${workflow.head_commit.author.name} 您的PR触发了CI失败。
            
            **失败工作流**: ${workflow.name}
            **运行链接**: [查看详情](${workflow.html_url})
            
            请检查并修复问题后重新提交。常用调试命令：
            \`\`\`bash
            source scripts/activate-venv.sh
            make ci
            \`\`\`
            `;
            
            // 获取相关的PR
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: \`\${context.repo.owner}:\${workflow.head_branch}\`,
              state: 'open'
            });
            
            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs.data[0].number,
                body: comment
              });
            } 