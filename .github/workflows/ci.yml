---
name: CI
on:
  push:
    branches: [main, dev, feat/ci-foundation, feat/ci-tighten]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 60
  UV_SYSTEM_PYTHON: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential

      - name: Install Python dependencies with uv priority
        run: |
          echo "::group::Dependency Installation"
          python -m pip install -U pip uv
          
          # Priority 1: Use uv.lock if available
          if [ -f "uv.lock" ]; then
            echo "üöÄ Using uv.lock for consistent dependencies..."
            uv pip sync --frozen uv.lock || {
              echo "‚ö†Ô∏è uv.lock sync failed, falling back to requirements.txt"
              uv pip install --no-cache --strict --resolution=lowest-direct -r requirements.txt
            }
          else
            echo "üì¶ uv.lock not found, using requirements.txt..."
            uv pip install --no-cache --strict --resolution=lowest-direct -r requirements.txt
          fi
          
          # Install project in editable mode
          pip install -e .
          
          # Install additional dev tools
          pip install pre-commit ruff mypy pytest pytest-cov bandit
          echo "::endgroup::"

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run code formatting check
        run: |
          echo "::group::Code Formatting"
          ruff format --check .
          echo "::endgroup::"

      - name: Run linting
        run: |
          echo "::group::Linting"
          ruff check .
          echo "::endgroup::"

      - name: Run type checking (core modules - strict)
        run: |
          echo "::group::Type Checking - Core Modules"
          mypy apps/ data_pipeline/ trainer/ 2>/dev/null || mypy apps/ data_pipeline/ 2>/dev/null || {
            echo "Running mypy on available core directories..."
            for dir in apps data_pipeline trainer; do
              if [ -d "$dir" ]; then
                echo "Checking $dir..."
                mypy "$dir/"
              fi
            done
          }
          echo "::endgroup::"

      - name: Run type checking (other modules - advisory)
        continue-on-error: true
        run: |
          echo "::group::Type Checking - Other Modules"
          echo "üîç Advisory type checking for remaining modules..."
          for dir in tests scripts models infra docs; do
            if [ -d "$dir" ]; then
              echo "Advisory check: $dir/"
              mypy "$dir/" || echo "‚ö†Ô∏è Type issues in $dir/ (advisory only)"
            fi
          done
          echo "::endgroup::"

      - name: Run security scan
        run: |
          echo "::group::Security Scan"
          bandit -r . --configfile pyproject.toml
          echo "::endgroup::"

      - name: Run gitleaks (strict)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

      - name: Run tests with coverage gate
        run: |
          echo "::group::Tests with Coverage Gate"
          pytest -v --cov=apps --cov=data_pipeline --cov=models --cov=trainer \
            --cov-report=xml --cov-report=term-missing --cov-report=html --cov-report=json \
            --cov-fail-under=${{ vars.COV_MIN || '15' }} \
            tests/ || {
              echo "‚ùå Tests failed or coverage below threshold (${{ vars.COV_MIN || '15' }}%)"
              exit 1
            }
          echo "::endgroup::"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            .coverage
            coverage.xml
            coverage.json
            htmlcov/**
            pytestdebug.log
          retention-days: 30
