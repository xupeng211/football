name: CI

on:
  push:
    branches:
      - main
      - dev
      - 'feat/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - dev

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 60
  PYTHON_VERSION: "3.11.9"

jobs:
  lint-and-validate:
    name: "Lint & Validate"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run linting and validation
        run: |
          poetry run ruff format --check .
          poetry run ruff check .
          poetry run mypy apps/ data_pipeline/ --ignore-missing-imports
          poetry run bandit -r . -c pyproject.toml -q

  test:
    name: "Tests"
    needs: lint-and-validate
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: football_test
          POSTGRES_USER: football
          POSTGRES_PASSWORD: football
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Required for smart-test and diff-cover

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Initialize DB Schema
        env:
          PGPASSWORD: football
        run: |
          chmod +x sql/schema.sql
          psql -h localhost -U football -d football_test -f sql/schema.sql

      - name: Run Tests (Pull Request - Smart Test)
        if: github.event_name == 'pull_request'
        env:
          DATABASE_URL: postgresql://football:football@localhost:5432/football_test
        run: CI=true poetry run pytest

      - name: Run Tests (Push - Full Suite)
        if: github.event_name == 'push'
        env:
          DATABASE_URL: postgresql://football:football@localhost:5432/football_test
        run: CI=true poetry run pytest

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            htmlcov/
            coverage.xml
            reports/
            .coverage
            coverage.json
          if-no-files-found: ignore
