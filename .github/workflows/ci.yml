---
# Force CI rebuild
name: CI
on:
  push:
    branches: [main, dev, feat/ci-foundation, feat/ci-tighten, feat/p1-hardening]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 60
  UV_SYSTEM_PYTHON: 1

jobs:
  lint:
    name: "Lint & Static Analysis"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
      - name: Set up uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies from lock file
        run: |
          python -m pip install -U pip uv
          if [ ! -f "requirements.lock" ]; then
            echo "⚠️ Lock file not found, generating..."
            uv pip compile pyproject.toml --all-extras -o requirements.lock
          fi
          uv pip sync requirements.lock
          uv pip install -e .
      - name: Validate Configs
        run: |
          python -c "import tomllib; tomllib.load(open('pyproject.toml','rb'))"
          python -c "import yaml; yaml.safe_load(open('.github/workflows/ci.yml'))"
      - name: Run code formatting check
        run: ruff format --check .
      - name: Run linting
        run: ruff check .
      - name: Run type checking
        run: mypy apps/ data_pipeline/ trainer/

      - name: Verify AI Context is up-to-date
        run: |
          make regen.context
          git diff --exit-code context/_pack.md || (echo "❌ AI context is out of sync. Please run 'make regen.context' locally and commit the changes." && exit 1)


      - name: Validate Data Contract
        run: make validate-contract
  security:
    name: "Security Scan"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Required for gitleaks
      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
      - name: Set up uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies from lock file
        run: |
          python -m pip install -U pip uv
          if [ ! -f "requirements.lock" ]; then
            echo "⚠️ Lock file not found, generating..."
            uv pip compile pyproject.toml --all-extras -o requirements.lock
          fi
          uv pip sync requirements.lock
          uv pip install -e .
      - name: Run Bandit scan
        run: bandit -r . --configfile pyproject.toml -ll -o reports/bandit_report.txt
      - name: Run pip-audit scan
        run: pip-audit --output reports/pip_audit_report.txt || echo "pip-audit found vulnerabilities, see report for details"
      - name: Run gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          report_path: ${{ github.workspace }}/reports/gitleaks_report.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
          if-no-files-found: ignore

  test:
    name: "Test & Coverage"
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: football_predict_test
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Required for diff-cover
      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
      - name: Set up uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
      - name: Install dependencies from lock file
        run: |
          python -m pip install -U pip uv
          if [ ! -f "requirements.lock" ]; then
            echo "⚠️ Lock file not found, generating..."
            uv pip compile pyproject.toml --all-extras -o requirements.lock
          fi
          uv pip sync requirements.lock
          uv pip install -e .
      - name: Verify API Contract
        run: |
          python scripts/generate_openapi.py
          if ! diff -q docs/api/openapi.json <(jq . docs/api/openapi.json); then
            echo "❌ API contract is out of sync. Please run 'python scripts/generate_openapi.py' and commit the changes."
            diff -u docs/api/openapi.json <(jq . docs/api/openapi.json)
            exit 1
          fi
      - name: Run tests in parallel with coverage
        env:
          COV_MIN: ${{ vars.COV_MIN || '70' }}
        run: |
          pytest --cov-fail-under="${COV_MIN}" tests/unit/ tests/auto/
      - name: Diff Coverage Gate (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          DIFF_COV_MIN: ${{ vars.DIFF_COV_MIN || 75 }}
        run: |
          base_ref="${{ github.base_ref || 'main' }}"
          diff-cover coverage.xml --compare-branch "origin/${base_ref}" --fail-under ${DIFF_COV_MIN}
      - name: Initialize DB Schema
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          PGPASSWORD=password psql -h localhost -U runner -d football_predict_test -f sql/schema.sql
      - name: Run Smoke Tests
        env:
          DATABASE_URL: postgresql://runner:password@localhost:5432/football_predict_test
        run: |
          uvicorn apps.api.main:app --host 0.0.0.0 --port 8000 &
          API_PID=$!
          sleep 10 # Wait for server to start
          python examples/minimal_predict.py
          kill $API_PID
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            htmlcov/
            coverage.xml
          if-no-files-found: ignore
