# 🚀 Football Prediction System v3.0 - Unified CI/CD Pipeline
name: CI

on:
  push:
    branches: [main, dev, refactor-v3]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # 快速预检查 (30秒内完成)
  pre-check:
    name: 🔍 Pre-check
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      should-test: ${{ steps.changes.outputs.python }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'src/**/*.py'
              - 'tests/**/*.py'
              - 'pyproject.toml'
              - '.github/workflows/ci.yml'
      
      - name: Validate config files
        run: |
          python -c "import tomllib; tomllib.load(open('pyproject.toml','rb'))"
          echo "✅ Configuration files are valid"

  # 主要质量检查 (并行执行)
  quality:
    name: 🔧 Quality Checks
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-test == 'true'
    timeout-minutes: 5
    strategy:
      matrix:
        check: [format, lint, type, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          uv sync --frozen --extra dev
          uv pip install -e .
      
      - name: Run ${{ matrix.check }}
        run: uv run make ${{ matrix.check }}
      
      - name: Upload security report
        if: matrix.check == 'security' && always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  # 测试 (分层并行)
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-test == 'true'
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-type: [unit, integration]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: football_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          uv sync --frozen --extra dev
          uv pip install -e .
      
      - name: Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/football_test
          REDIS_URL: redis://localhost:6379/0
        run: uv run pytest tests/${{ matrix.test-type }}/ --cov --cov-report=xml
      
      - name: Upload coverage
        if: matrix.python-version == env.PYTHON_VERSION && matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # 构建验证
  build:
    name: 🐳 Build & Security
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: football-predict:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: football-predict:test
          format: sarif
          output: trivy-results.sarif
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # 汇总结果
  summary:
    name: 📋 Summary
    runs-on: ubuntu-latest
    needs: [pre-check, quality, test, build]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "📊 CI/CD Summary:"
          echo "Pre-check: ${{ needs.pre-check.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ CI failed - blocking merge"
            exit 1
          else
            echo "✅ All checks passed!"
          fi
