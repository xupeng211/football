name: CI

on:
  push:
    branches: [ main, dev, feat/ci-foundation ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip uv
          pip install -r requirements.txt
          pip install -e .
          pip install pre-commit ruff mypy pytest pytest-cov bandit

      - name: Install gitleaks
        run: |
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.21.2_linux_x64.tar.gz | tar -xzC /tmp
          sudo mv /tmp/gitleaks /usr/local/bin/
          gitleaks version

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Cache tool results
        uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .pytest_cache
            .ruff_cache
          key: tools-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}

      - name: Run formatting check
        run: |
          echo "::group::Code formatting"
          ruff format --check .
          echo "::endgroup::"

      - name: Run linting
        run: |
          echo "::group::Code linting"
          ruff check .
          echo "::endgroup::"

      - name: Run type checking
        run: |
          echo "::group::Type checking"
          mypy .
          echo "::endgroup::"

      - name: Run security check
        run: |
          echo "::group::Security scanning"
          bandit -r . --configfile pyproject.toml
          echo "::endgroup::"

      - name: Run tests
        run: |
          echo "::group::Running tests"
          pytest -v --cov-report=xml
          echo "::endgroup::"

      - name: Run gitleaks scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Secrets scanning"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            gitleaks protect --config .gitleaks.toml --verbose --no-banner
          else
            gitleaks detect --config .gitleaks.toml --verbose --no-banner
          fi
          echo "::endgroup::"

      - name: Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Debug on failure
        if: failure()
        run: |
          echo "::group::Environment info"
          python --version
          pip --version
          pip list
          echo "::endgroup::"

          echo "::group::File permissions"
          ls -la
          echo "::endgroup::"
