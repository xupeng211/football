# üöÄ Simplified CI for Core Functionality
name: CI-Simple

on:
  push:
    branches: [main, dev, refactor-v3]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Âü∫Á°ÄÊ£ÄÊü•
  core-checks:
    name: ‚úÖ Core Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          uv sync --frozen --extra dev
          uv pip install -e .
          uv pip install bcrypt PyJWT
      
      - name: Validate config
        run: |
          python -c "import tomllib; tomllib.load(open('pyproject.toml','rb'))"
          echo "‚úÖ Configuration valid"
      
      - name: Code formatting
        run: uv run ruff format --check .
      
      - name: Code linting
        run: uv run ruff check .
      
      - name: Security scan
        run: uv run bandit -r src/ -c pyproject.toml -q
        continue-on-error: true
      
      - name: Core API tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          uv run pytest tests/unit/api/ tests/test_api_simple.py \
            --cov=src \
            --cov-report=term \
            -v \
            --maxfail=5
      
      - name: Test import validation
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          python -c "
          import sys
          sys.path.append('tests')
          try:
              from fixtures.api_fixtures import async_client
              from fixtures.database_fixtures import async_db_session
              from fixtures.cache_fixtures import redis_client
              print('‚úÖ Core fixtures imported successfully')
          except Exception as e:
              print(f'‚ö†Ô∏è Import warning: {e}')
              # Don't fail CI for import issues
          "

  # Ê±áÊÄªÁªìÊûú
  summary:
    name: üìã CI Summary
    runs-on: ubuntu-latest
    needs: [core-checks]
    if: always()
    steps:
      - name: Report results
        run: |
          echo "üìä CI Summary:"
          echo "Core checks: ${{ needs.core-checks.result }}"
          
          if [[ "${{ needs.core-checks.result }}" == "failure" ]]; then
            echo "‚ùå Core checks failed"
            exit 1
          else
            echo "‚úÖ Core functionality verified! üéâ"
          fi 