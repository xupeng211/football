# Zero-Redlights CI Guide (Delta)

## 常用命令

make install     # 本地依赖（uv 优先，与 CI 一致）
make format && make lint
make type        # 若有分阶段策略，核心阻塞，其它非阻塞
make cov         # 覆盖率门槛由 COV_MIN 控制（默认 15）
make diffcov     # 改动行覆盖率检查（仅对 PR 改动行要求 ≥ 75%）
make local-ci    # 本地一次性跑完整 CI

## 原则

- 依赖以 uv.lock 为准；不要手改锁文件
- 配置集中在 pyproject.toml；避免重复风格文件
- 测试默认禁网；确需联网请用 @pytest.mark.allow_network

## 渐进收紧

Week1: COV_MIN=15；gitleaks/mypy 非阻塞
Week2: COV_MIN=20；gitleaks 阻塞（已启用），mypy 对核心目录阻塞，DIFF_COV_MIN 提至 80
Week3+: 逐步提升 COV_MIN 并扩大 mypy 阻塞范围

## 改动行覆盖率门禁

CI 在 PR 上执行 diff-cover，默认阈值 75（变量 DIFF_COV_MIN 可调）。

**本地预检**：`make diffcov BASE=main`

**配置说明**：

- 仅对 PR 改动的代码行要求覆盖率 ≥ DIFF_COV_MIN%
- 阈值可通过仓库变量 `DIFF_COV_MIN` 配置（默认 75）
- 避免对历史代码的大规模返工，渐进式提升代码质量

## 产物与版本控制策略

- **版本库中仅保留**：`reports/CI_GATES_REPORT.md`（人读摘要）。
- **不纳入版本控制**：覆盖率与改动行可视化产物（`htmlcov/**`, `coverage.xml/json`, `diff-coverage.html/md`）。
  - 本地查看：`make diffcov BASE=main`
  - 远端查看：在 PR 的 Actions **Artifacts** 中下载 `diff-coverage.html/md`。

## Nested Git / Vendor 策略

- 禁止在 `src/` 放置任何第三方仓库或模板仓库（包括私有脚手架）。
- 若必须引入第三方代码：
  - **首选**：以 `pip` 依赖的方式按 tag/commit 引入（requirements.in）。
  - **备选**：使用 `git submodule` 放在 `external/`，并保持在 ruff/mypy/pytest/gitleaks 的排除列表中。
- CI 与 pre-commit 已启用 **no_nested_git** 守卫；如确需临时豁免，请设置 `ALLOW_NESTED_GIT=<path>` 环境变量（仅限特例）。

## 第三方组件：AICultureKit 以 pip 依赖接入

- 通过 PEP 508 直接引用固定 tag/commit 引入第三方仓库，示例（带可选子目录）：
  - `aiculturekit @ git+https://github.com/xupeng211/AICultureKit.git@c353a2862c51b1dbb4e93dd5d8476118c77a490a`
  - `aiculturekit @ git+https://github.com/xupeng211/AICultureKit.git@<commit>#subdirectory=python`
- 禁止将第三方仓库直接放入 `src/`；如确需 vendor，请使用 `external/` 子模块并保持在扫描排除列表。
- 依赖升级路径：修改 `requirements.in` 的 ref → `pip-compile` 重新锁定。

### 回滚操作记录

- **回滚步骤**: 改 REF → pip-compile → 验证 → 合并
- **最近回滚**: 演示从 commit c353a28... 回滚到 a1b2c3d...（演示用途）
- **回滚原因**: 演示版本回滚的标准流程
