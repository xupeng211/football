# =============================================================================
# 足球预测系统 - 环境配置模板
# =============================================================================
# 复制此文件为 .env 并填入实际值: cp .env.example .env
# 🔧 配置说明: https://github.com/your-org/football-predict-system/docs/CONFIG.md

# =============================================================================
# 🗄️ 数据库配置
# =============================================================================
# PostgreSQL 主数据库
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=football_predict
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your_secure_password_here

# 数据库连接URL (自动生成，通常不需要修改)
DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Prefect 数据库 (用于工作流管理)
PREFECT_DB=prefect_db
PREFECT_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${PREFECT_DB}

# =============================================================================
# 🔄 缓存配置
# =============================================================================
# Redis 缓存
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}

# =============================================================================
# 🌐 API 配置
# =============================================================================
# FastAPI 服务配置
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=1
API_RELOAD=true
API_DEBUG=false

# API 安全配置
API_SECRET_KEY=your_super_secret_key_change_this_in_production_min_32_chars
API_ACCESS_TOKEN_EXPIRE_MINUTES=30
API_ALGORITHM=HS256

# CORS 配置 (开发环境)
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080", "http://127.0.0.1:3000"]
CORS_ALLOW_CREDENTIALS=true

# =============================================================================
# 🔮 机器学习配置
# =============================================================================
# 模型配置
MODEL_VERSION=latest
MODEL_REGISTRY_PATH=./models/artifacts
MODEL_CACHE_TTL=3600
MODEL_CACHE_SIZE=10

# 训练配置
TRAINING_DATA_PATH=./data
TRAINING_BATCH_SIZE=1000
TRAINING_EPOCHS=100
TRAINING_LEARNING_RATE=0.01

# =============================================================================
# 🏈 足球数据 API
# =============================================================================
# Football-Data.org API (免费层: 10 requests/minute)
# 申请地址: https://www.football-data.org/client/register
FOOTBALL_DATA_API_KEY=your_football_data_api_key_here
FOOTBALL_DATA_BASE_URL=https://api.football-data.org/v4
FOOTBALL_DATA_RATE_LIMIT=10

# 备用数据源 (可选)
RAPIDAPI_KEY=your_rapidapi_key_here
RAPIDAPI_HOST=api-football-v1.p.rapidapi.com

# =============================================================================
# 🔄 工作流配置 (Prefect)
# =============================================================================
# Prefect 服务器配置
PREFECT_API_URL=http://localhost:4200/api
PREFECT_SERVER_HOST=0.0.0.0
PREFECT_SERVER_PORT=4200

# 工作流调度配置 (Cron 表达式)
DATA_COLLECTION_CRON=0 2 * * *  # 每天凌晨2点采集数据
MODEL_TRAINING_CRON=0 4 * * 0   # 每周日凌晨4点训练模型
BACKTEST_CRON=0 6 * * 1         # 每周一凌晨6点运行回测

# =============================================================================
# 📊 监控和日志配置
# =============================================================================
# 日志配置
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE_PATH=./logs/app.log
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5

# Prometheus 监控
ENABLE_METRICS=true
METRICS_PORT=9090
METRICS_ENDPOINT=/metrics

# 健康检查配置
HEALTH_CHECK_TIMEOUT=30
HEALTH_CHECK_INTERVAL=60

# =============================================================================
# 🔒 安全配置
# =============================================================================
# 安全扫描
SECURITY_SCAN_ENABLED=true
BANDIT_CONFIG_FILE=pyproject.toml

# 密钥管理 (生产环境使用外部密钥管理服务)
ENCRYPTION_KEY=your_encryption_key_32_chars_minimum
JWT_SECRET_KEY=your_jwt_secret_key_32_chars_minimum

# =============================================================================
# 🐳 Docker 配置
# =============================================================================
# Docker Compose 环境
COMPOSE_PROJECT_NAME=football-predict
COMPOSE_FILE=docker-compose.yml

# 容器资源限制
POSTGRES_MEMORY_LIMIT=512m
REDIS_MEMORY_LIMIT=256m
API_MEMORY_LIMIT=1g

# =============================================================================
# 🧪 测试配置
# =============================================================================
# 测试数据库 (隔离测试环境)
TEST_DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/football_predict_test
TEST_REDIS_URL=redis://localhost:6379/1

# 测试配置
PYTEST_WORKERS=auto
COVERAGE_THRESHOLD=80
MUTATION_TEST_ENABLED=false

# =============================================================================
# 🚀 部署配置
# =============================================================================
# 环境标识
ENVIRONMENT=development  # development, staging, production
DEBUG=true

# 性能配置
UVICORN_WORKERS=1
UVICORN_MAX_REQUESTS=1000
UVICORN_TIMEOUT_KEEP_ALIVE=5

# =============================================================================
# 📈 业务配置
# =============================================================================
# 预测配置
PREDICTION_CONFIDENCE_THRESHOLD=0.65
MAX_PREDICTIONS_PER_REQUEST=100
PREDICTION_CACHE_TTL=1800

# 回测配置
BACKTEST_START_DATE=2023-01-01
BACKTEST_END_DATE=2024-12-31
BACKTEST_INITIAL_BALANCE=1000.0

# 数据采集配置
DATA_COLLECTION_ENABLED=true
DATA_COLLECTION_BATCH_SIZE=100
DATA_COLLECTION_RATE_LIMIT=60  # requests per minute
