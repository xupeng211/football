import sys

import pandas as pd
import yaml

from data_pipeline.features.build import build_match_features


def main() -> None:
    """Validates that the feature contract matches the implementation."""
    print("🚀 Validating data contract against feature generation code...")

    # 1. Load features from the contract file
    try:
        with open("contracts/feature_specs.yaml") as f:
            contract = yaml.safe_load(f)
        contract_features = {feature["name"] for feature in contract["features"]}
        print(f"📋 Found {len(contract_features)} features in contract.")
    except FileNotFoundError:
        print("❌ Error: contracts/feature_specs.yaml not found.")
        sys.exit(1)

    # 2. Generate features from a sample dataframe to get actual feature names
    print("⚙️ Generating features from sample data to get actual implementation...")
    sample_matches = pd.DataFrame(
        {
            "id": [1],
            "date": [pd.to_datetime("2025-01-01")],
            "home": ["Team A"],
            "away": ["Team B"],
            "home_goals": [1],
            "away_goals": [0],
            "result": ["H"],
        }
    )
    sample_odds = pd.DataFrame({"match_id": [1], "h": [2.0], "d": [3.0], "a": [4.0]})

    try:
        actual_df = build_match_features(sample_matches, sample_odds)
        # Exclude metadata/target columns that are not considered features
        actual_features = set(actual_df.columns) - {"id", "home", "away", "target"}
        print(f"💻 Found {len(actual_features)} features in code implementation.")
    except Exception as e:
        print(f"❌ Error generating features from code: {e}")
        sys.exit(1)

    # 3. Compare the two sets of features
    missing_in_code = contract_features - actual_features
    missing_in_contract = actual_features - contract_features

    if not missing_in_code and not missing_in_contract:
        print("✅ Data contract and feature implementation are in sync!")
        sys.exit(0)
    else:
        print("\n--- Mismatch Found ---")
        if missing_in_code:
            print(
                "\n❌ The following features are in the contract but NOT generated by the code:"
            )
            for feature in sorted(list(missing_in_code)):
                print(f"  - {feature}")

        if missing_in_contract:
            print(
                "\n❌ The following features are generated by the code but NOT in the contract:"
            )
            for feature in sorted(list(missing_in_contract)):
                print(f"  - {feature}")

        print(
            "\n🔥 Please update contracts/feature_specs.yaml or the feature generation code to resolve the mismatch."
        )
        sys.exit(1)


if __name__ == "__main__":
    main()
