#!/bin/bash
# 🚀 个人项目初始化脚手架
# 功能：快速创建新项目，复用现有的优秀配置

set -euo pipefail

# 脚本配置
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMPLATES_DIR="${SCRIPT_DIR}/project-templates"

# 颜色输出
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m'

# 显示欢迎信息
show_welcome() {
    clear
    echo -e "${PURPLE}🚀 个人项目初始化脚手架${NC}"
    echo "=========================================="
    echo "快速创建新项目，复用现有的优秀配置"
    echo ""
}

# 显示帮助
show_help() {
    echo -e "${BLUE}用法:${NC}"
    echo "  ./scaffold-personal <项目名> [模板类型]"
    echo ""
    echo -e "${BLUE}可用模板:${NC}"
    echo "  python-api      Python API项目 (FastAPI + 完整配置)"
    echo "  python-ml       机器学习项目 (数据科学 + MLflow)"
    echo "  python-basic    基础Python项目"
    echo "  web-full        全栈Web项目 (前后端分离)"
    echo ""
    echo -e "${BLUE}示例:${NC}"
    echo "  ./scaffold-personal my-api python-api"
    echo "  ./scaffold-personal ml-project python-ml"
    echo "  ./scaffold-personal simple-tool python-basic"
    echo ""
}

# 获取项目模板列表
get_available_templates() {
    echo "python-api python-ml python-basic web-full"
}

# 交互式选择模板
interactive_template_selection() {
    echo -e "${YELLOW}请选择项目模板:${NC}"
    echo ""
    echo "1. 🔥 Python API项目 (FastAPI + 完整DevOps配置)"
    echo "   - FastAPI框架 + PostgreSQL + Redis + Docker"
    echo "   - 完整CI/CD + 测试覆盖 + 监控"
    echo ""
    echo "2. 🧠 机器学习项目 (数据科学 + AI工具)"
    echo "   - Jupyter + MLflow + 模型管理"
    echo "   - 数据处理 + 实验追踪 + 部署"
    echo ""
    echo "3. 🐍 基础Python项目 (轻量级)"
    echo "   - 基础配置 + 测试 + 文档"
    echo "   - 适合工具、脚本、库开发"
    echo ""
    echo "4. 🌐 全栈Web项目 (前后端分离)"
    echo "   - React前端 + Python后端"
    echo "   - 完整的Web应用架构"
    echo ""

    read -p "请选择 (1-4): " choice

    case $choice in
        1) echo "python-api" ;;
        2) echo "python-ml" ;;
        3) echo "python-basic" ;;
        4) echo "web-full" ;;
        *) echo "python-basic" ;;
    esac
}

# 创建项目
create_project() {
    local project_name="$1"
    local template_type="$2"
    local target_dir="../$project_name"

    echo -e "${BLUE}🚀 创建项目: ${project_name}${NC}"
    echo -e "${BLUE}📋 使用模板: ${template_type}${NC}"
    echo ""

    # 检查目标目录
    if [[ -d "$target_dir" ]]; then
        echo -e "${YELLOW}⚠️  目录 $target_dir 已存在${NC}"
        read -p "是否覆盖? (y/N): " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo "操作已取消"
            exit 0
        fi
        rm -rf "$target_dir"
    fi

    # 创建项目目录
    mkdir -p "$target_dir"
    cd "$target_dir"

    # 根据模板类型复制文件
    case $template_type in
        "python-api")
            create_python_api_project "$project_name"
            ;;
        "python-ml")
            create_python_ml_project "$project_name"
            ;;
        "python-basic")
            create_python_basic_project "$project_name"
            ;;
        "web-full")
            create_web_full_project "$project_name"
            ;;
        *)
            echo -e "${YELLOW}未知模板类型，使用基础Python模板${NC}"
            create_python_basic_project "$project_name"
            ;;
    esac

    # 项目创建完成
    echo ""
    echo -e "${GREEN}🎉 项目创建完成！${NC}"
    echo -e "${GREEN}📁 项目位置: ${target_dir}${NC}"
    echo ""
    echo -e "${BLUE}🚀 下一步操作:${NC}"
    echo "  cd $project_name"
    echo "  poetry install"
    echo "  git init && git add . && git commit -m 'Initial commit'"
    echo ""
}

# 创建Python API项目
create_python_api_project() {
    local project_name="$1"

    echo "📦 创建Python API项目..."

    # 复制核心配置文件
    cp "$SCRIPT_DIR/pyproject.toml" .
    cp "$SCRIPT_DIR/.gitignore" .
    cp "$SCRIPT_DIR/Makefile" .

    # 复制CI/CD配置
    mkdir -p .github/workflows
    cp "$SCRIPT_DIR/.github/workflows/ci.yml" .github/workflows/
    cp "$SCRIPT_DIR/.pre-commit-config.yaml" .

    # 复制Docker配置
    cp "$SCRIPT_DIR/Dockerfile" .
    cp "$SCRIPT_DIR/docker-compose.yml" .

    # 复制脚本
    mkdir -p scripts
    cp "$SCRIPT_DIR/scripts/activate-venv.sh" scripts/
    cp "$SCRIPT_DIR/scripts/setup-dev-env.sh" scripts/
    cp "$SCRIPT_DIR/scripts/ci-unified.sh" scripts/

    # 创建项目结构
    mkdir -p src/${project_name//-/_}
    mkdir -p tests
    mkdir -p docs

    # 创建主要Python文件
    cat > "src/${project_name//-/_}/__init__.py" << EOF
"""${project_name} - API项目"""

__version__ = "0.1.0"
EOF

    cat > "src/${project_name//-/_}/main.py" << EOF
"""FastAPI应用主文件"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI(
    title="${project_name}",
    description="API项目",
    version="0.1.0",
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "Hello from ${project_name}!"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

    # 创建测试文件
    cat > "tests/test_main.py" << EOF
"""测试主应用"""

from fastapi.testclient import TestClient
from src.${project_name//-/_}.main import app

client = TestClient(app)

def test_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello from ${project_name}!"}

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}
EOF

    # 创建README
    cat > README.md << EOF
# ${project_name}

Python API项目，使用FastAPI框架。

## 快速开始

\`\`\`bash
# 安装依赖
poetry install

# 启动开发服务器
poetry run uvicorn src.${project_name//-/_}.main:app --reload

# 运行测试
poetry run pytest

# 代码检查
make lint

# 格式化代码
make format
\`\`\`

## API文档

启动服务后访问：
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## 部署

\`\`\`bash
# Docker部署
docker-compose up -d
\`\`\`
EOF

    # 更新pyproject.toml中的项目名
    sed -i "s/football-predict-system/${project_name}/g" pyproject.toml

    echo "✅ Python API项目结构创建完成"
}

# 创建机器学习项目
create_python_ml_project() {
    local project_name="$1"

    echo "📦 创建机器学习项目..."

    # 复制基础配置
    cp "$SCRIPT_DIR/pyproject.toml" .
    cp "$SCRIPT_DIR/.gitignore" .

    # 创建ML项目结构
    mkdir -p {src,notebooks,data/{raw,processed,models},scripts,tests,docs}

    # 创建项目文件
    cat > "src/${project_name//-/_}/__init__.py" << EOF
"""${project_name} - 机器学习项目"""

__version__ = "0.1.0"
EOF

    # 创建数据处理模块
    cat > "src/${project_name//-/_}/data_processing.py" << EOF
"""数据处理模块"""

import pandas as pd
from pathlib import Path

def load_data(file_path: str) -> pd.DataFrame:
    """加载数据"""
    return pd.read_csv(file_path)

def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    """数据预处理"""
    # 在这里添加数据预处理逻辑
    return df

def save_processed_data(df: pd.DataFrame, output_path: str):
    """保存处理后的数据"""
    df.to_csv(output_path, index=False)
EOF

    # 创建模型模块
    cat > "src/${project_name//-/_}/model.py" << EOF
"""机器学习模型"""

from sklearn.base import BaseEstimator
import joblib
from pathlib import Path

class MLModel:
    def __init__(self):
        self.model = None

    def train(self, X, y):
        """训练模型"""
        # 在这里实现模型训练逻辑
        pass

    def predict(self, X):
        """预测"""
        if self.model is None:
            raise ValueError("模型尚未训练")
        return self.model.predict(X)

    def save_model(self, model_path: str):
        """保存模型"""
        joblib.dump(self.model, model_path)

    def load_model(self, model_path: str):
        """加载模型"""
        self.model = joblib.load(model_path)
EOF

    # 创建Jupyter notebook示例
    cat > "notebooks/01_data_exploration.ipynb" << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 数据探索\n",
    "\n",
    "这个notebook用于数据的初步探索和分析。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# 设置绘图样式\n",
    "plt.style.use('default')\n",
    "sns.set_palette('husl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 加载数据\n",
    "# df = pd.read_csv('../data/raw/your_data.csv')\n",
    "# df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

    # 创建README
    cat > README.md << EOF
# ${project_name}

机器学习项目模板。

## 项目结构

\`\`\`
${project_name}/
├── src/                    # 源代码
├── notebooks/              # Jupyter notebooks
├── data/
│   ├── raw/               # 原始数据
│   ├── processed/         # 处理后的数据
│   └── models/            # 训练好的模型
├── scripts/               # 脚本文件
├── tests/                 # 测试文件
└── docs/                  # 文档
\`\`\`

## 快速开始

\`\`\`bash
# 安装依赖
poetry install

# 启动Jupyter Lab
poetry run jupyter lab

# 运行数据处理脚本
poetry run python scripts/process_data.py
\`\`\`

## 工作流程

1. **数据探索**: 使用 \`notebooks/01_data_exploration.ipynb\`
2. **数据处理**: 使用 \`src/${project_name//-/_}/data_processing.py\`
3. **模型训练**: 使用 \`src/${project_name//-/_}/model.py\`
4. **结果分析**: 创建新的notebook进行分析
EOF

    # 更新pyproject.toml添加ML依赖
    cat >> pyproject.toml << EOF

# 机器学习依赖
[tool.poetry.dependencies.ml]
pandas = "^2.0.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
jupyter = "^1.0.0"
mlflow = "^2.5.0"
EOF

    echo "✅ 机器学习项目结构创建完成"
}

# 创建基础Python项目
create_python_basic_project() {
    local project_name="$1"

    echo "📦 创建基础Python项目..."

    # 复制基础配置
    cp "$SCRIPT_DIR/pyproject.toml" .
    cp "$SCRIPT_DIR/.gitignore" .
    cp "$SCRIPT_DIR/.pre-commit-config.yaml" .

    # 创建基础项目结构
    mkdir -p src/${project_name//-/_}
    mkdir -p tests
    mkdir -p docs

    # 创建主要Python文件
    cat > "src/${project_name//-/_}/__init__.py" << EOF
"""${project_name}"""

__version__ = "0.1.0"
EOF

    cat > "src/${project_name//-/_}/main.py" << EOF
"""主模块"""

def main():
    """主函数"""
    print("Hello from ${project_name}!")

if __name__ == "__main__":
    main()
EOF

    # 创建测试文件
    cat > "tests/test_main.py" << EOF
"""测试主模块"""

from src.${project_name//-/_}.main import main

def test_main():
    """测试主函数"""
    # 这里添加具体的测试逻辑
    assert True
EOF

    # 创建README
    cat > README.md << EOF
# ${project_name}

基础Python项目。

## 安装

\`\`\`bash
poetry install
\`\`\`

## 使用

\`\`\`bash
poetry run python -m src.${project_name//-/_}.main
\`\`\`

## 测试

\`\`\`bash
poetry run pytest
\`\`\`
EOF

    # 更新pyproject.toml
    sed -i "s/football-predict-system/${project_name}/g" pyproject.toml

    echo "✅ 基础Python项目结构创建完成"
}

# 创建全栈Web项目
create_web_full_project() {
    local project_name="$1"

    echo "📦 创建全栈Web项目..."

    # 创建前后端分离结构
    mkdir -p {backend,frontend,docs}

    # 后端设置
    cd backend
    create_python_api_project "${project_name}-backend"
    cd ..

    # 前端设置（创建基础结构）
    mkdir -p frontend/{src,public}

    cat > frontend/package.json << EOF
{
  "name": "${project_name}-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
EOF

    cat > frontend/src/App.js << EOF
import React from 'react';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>欢迎使用 ${project_name}</h1>
        <p>全栈Web应用</p>
      </header>
    </div>
  );
}

export default App;
EOF

    cat > frontend/public/index.html << EOF
<!DOCTYPE html>
<html lang="zh">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${project_name}</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
EOF

    # 项目根README
    cat > README.md << EOF
# ${project_name}

全栈Web项目，前后端分离架构。

## 项目结构

\`\`\`
${project_name}/
├── backend/               # Python后端 (FastAPI)
├── frontend/              # React前端
└── docs/                  # 文档
\`\`\`

## 快速开始

### 后端

\`\`\`bash
cd backend
poetry install
poetry run uvicorn src.${project_name//-/_}_backend.main:app --reload
\`\`\`

### 前端

\`\`\`bash
cd frontend
npm install
npm start
\`\`\`

## 访问地址

- 前端: http://localhost:3000
- 后端API: http://localhost:8000
- API文档: http://localhost:8000/docs
EOF

    echo "✅ 全栈Web项目结构创建完成"
}

# 主函数
main() {
    # 解析参数
    case "${1:-}" in
        "-h"|"--help"|"help")
            show_help
            exit 0
            ;;
        "")
            show_welcome
            echo -e "${YELLOW}请提供项目名称${NC}"
            echo ""
            read -p "项目名称: " project_name
            if [[ -z "$project_name" ]]; then
                echo "项目名称不能为空"
                exit 1
            fi
            template_type=$(interactive_template_selection)
            ;;
        *)
            project_name="$1"
            template_type="${2:-}"

            if [[ -z "$template_type" ]]; then
                show_welcome
                template_type=$(interactive_template_selection)
            fi
            ;;
    esac

    # 验证模板类型
    available_templates=$(get_available_templates)
    if [[ ! " $available_templates " =~ " $template_type " ]]; then
        echo -e "${YELLOW}⚠️  未知模板类型: $template_type${NC}"
        echo "可用模板: $available_templates"
        template_type=$(interactive_template_selection)
    fi

    # 创建项目
    create_project "$project_name" "$template_type"
}

# 脚本入口
main "$@"
